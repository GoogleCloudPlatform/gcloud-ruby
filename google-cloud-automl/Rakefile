# Copyright 2019 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/setup"
require "bundler/gem_tasks"

require "rubocop/rake_task"
RuboCop::RakeTask.new

require "rake/testtask"

desc "Run tests."
task :test do
  $LOAD_PATH.unshift "lib", "test"
  Dir.glob("test/**/*test.rb")
    .reject { |file| file.include? "smoke_test" }
    .each { |file| require_relative file }
end

namespace :test do
  desc "Runs tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google-cloud-automl"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task["test"].invoke
  end
end

desc "Runs the smoke tests."
task :smoke_test do
  if ENV["AUTOML_TEST_PROJECT"].nil?
    fail "The AUTOML_TEST_PROJECT environment variable must be set. "\
      "e.g AUTOML_TEST_PROJECT=test123 rake smoke_test"
  end

  Rake::Task["smoke_test:run"].invoke
end

namespace :smoke_test do
  desc "Runs smoke tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google-cloud-automl"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task[:smoke_test].invoke
  end

  Rake::TestTask.new :run do |t|
    t.test_files = FileList["acceptance/**/*smoke_test.rb"]
    t.warning = false
  end
end

# Acceptance tests
desc "Run the google-cloud-automl acceptance tests."
task :acceptance, :project, :keyfile do |t, args|
  project = args[:project]
  project ||= ENV["AUTOML_TEST_PROJECT"] || ENV["GCLOUD_TEST_PROJECT"]
  keyfile = args[:keyfile]
  keyfile ||= ENV["AUTOML_TEST_KEYFILE"] || ENV["GCLOUD_TEST_KEYFILE"]
  if keyfile
    keyfile = File.read keyfile
  else
    keyfile ||= ENV["AUTOML_TEST_KEYFILE_JSON"] || ENV["GCLOUD_TEST_KEYFILE_JSON"]
  end
  if project.nil? || keyfile.nil?
    fail "You must provide a project and keyfile. e.g. rake acceptance[test123, /path/to/keyfile.json] or AUTOML_TEST_PROJECT=test123 AUTOML_TEST_KEYFILE=/path/to/keyfile.json rake acceptance"
  end
  # clear any env var already set
  require "google/cloud/automl/v1beta1/credentials"
  (Google::Cloud::AutoML::V1beta1::Credentials::PATH_ENV_VARS +
   Google::Cloud::AutoML::V1beta1::Credentials::JSON_ENV_VARS).each do |path|
    ENV[path] = nil
  end
  # always overwrite when running tests
  ENV["AUTOML_PROJECT"] = project
  ENV["AUTOML_KEYFILE"] = nil
  ENV["AUTOML_KEYFILE_JSON"] = keyfile

  # Required for smoke tests
  ENV["AUTOML_TEST_PROJECT"] = project

  Rake::Task["acceptance:run"].invoke
end

namespace :acceptance do
  task :run do
    Rake::Task[:smoke_test].invoke
  end

  desc "Run acceptance tests with coverage."
  task :coverage do
  end

  desc "Run acceptance cleanup."
  task :cleanup do
  end
end

require "yard"
require "yard/rake/yardoc_task"
YARD::Rake::YardocTask.new

desc "Run yard-doctest example tests."
task :doctest do
  puts "The google-cloud-automl gem does not have doctest tests."
end

desc "Run the CI build"
task :ci do
  header "BUILDING google-cloud-automl"
  header "google-cloud-automl rubocop", "*"
  sh "bundle exec rake rubocop"
  header "google-cloud-automl doctest", "*"
  sh "bundle exec rake doctest"
  header "google-cloud-automl test", "*"
  sh "bundle exec rake test"
end

namespace :ci do
  desc "Run the CI build, with acceptance tests."
  task :acceptance do
    Rake::Task["ci"].invoke
    header "google-cloud-automl acceptance", "*"
    sh "bundle exec rake acceptance -v"
  end
  task :a do
    # This is a handy shortcut to save typing
    Rake::Task["ci:acceptance"].invoke
  end
end

task :default => :test

def header str, token = "#"
  line_length = str.length + 8
  puts ""
  puts token * line_length
  puts "#{token * 3} #{str} #{token * 3}"
  puts token * line_length
  puts ""
end
