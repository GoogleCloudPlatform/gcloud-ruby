# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module Recommender
      module V1
        module Recommender
          # Path helper methods for the Recommender API.
          module Paths
            ##
            # Create a fully-qualified Recommendation resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/recommenders/{recommender}/recommendations/{recommendation}`
            #
            # @param project [String]
            # @param location [String]
            # @param recommender [String]
            # @param recommendation [String]
            #
            # @return [::String]
            def recommendation_path project:, location:, recommender:, recommendation:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"
              raise ::ArgumentError, "recommender cannot contain /" if recommender.to_s.include? "/"

              "projects/#{project}/locations/#{location}/recommenders/#{recommender}/recommendations/#{recommendation}"
            end

            ##
            # Create a fully-qualified Recommender resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/recommenders/{recommender}`
            #
            # @param project [String]
            # @param location [String]
            # @param recommender [String]
            #
            # @return [::String]
            def recommender_path project:, location:, recommender:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

              "projects/#{project}/locations/#{location}/recommenders/#{recommender}"
            end

            extend self
          end
        end
      end
    end
  end
end
