# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


require "bundler/setup"
require "bundler/gem_tasks"

require "rubocop/rake_task"
RuboCop::RakeTask.new

desc "Run tests."
task :test do
  $LOAD_PATH.unshift "lib", "test"
  Dir.glob("test/**/*_test.rb").each { |file| require_relative file }
end

namespace :test do
  desc "Run tests with coverage."
  task :coverage do
  end
end

desc "Run acceptance tests."
task :acceptance do
  puts "The google-cloud-error_reporting gem does not have acceptance tests."
end

namespace :acceptance do
  desc "Run acceptance cleanup."
  task :cleanup do
  end
end

desc "Run yard-doctest example tests."
task :doctest do
  puts "The google-cloud-error_reporting gem does not have doctest tests."
end

desc "Run rubocop."
task :rubocop do
  puts "The google-cloud-error_reporting gem does not use rubocop."
end

namespace :integration do
  desc "Run integration tests against GAE"
  task :gae, :project_uri do |t, args|
    fail "You must provide a project_uri. e.g. rake " \
      "integration:gae[http://my-project.appspot.com]" if args[:project_uri].nil?

    ENV["TEST_GOOGLE_CLOUD_PROJECT_URI"] = args[:project_uri]

    $LOAD_PATH.unshift "lib", "integration"
    Dir.glob("integration/*_test.rb").each { |file| require_relative file }
    Dir.glob("integration/gae/**/*_test.rb").each { |file| require_relative file }
  end

  desc "Run integration tests against GKE"
  task :gke, :pod_name do |t, args|
    fail "You must provide the GKE pod name. e.g. " \
      "rake integration:gke[google-cloud-ruby-test]" if args[:pod_name].nil?

    ENV["TEST_GKE_POD_NAME"] = args[:pod_name]

    $LOAD_PATH.unshift "lib", "integration"
    Dir.glob("integration/*_test.rb").each { |file| require_relative file }
    Dir.glob("integration/gke/**/*_test.rb").each { |file| require_relative file }
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  require "google-cloud-error_reporting"
  def gcloud; @gcloud ||= Google::Cloud.new; end

  ARGV.clear
  IRB.start
end

require "yard"
require "yard/rake/yardoc_task"
YARD::Rake::YardocTask.new

desc "Generates JSON output from google-cloud-error_reporting .yardoc"
task :jsondoc => :yard do
  require "rubygems"
  require "gcloud/jsondoc"

  registry = YARD::Registry.load! ".yardoc"
  generator = Gcloud::Jsondoc::Generator.new registry, "google-cloud-error_reporting"
  generator.write_to "jsondoc"
  cp ["docs/instrumentation.md", "docs/toc.json"], "jsondoc", verbose: true
end

desc "Run the CI build"
task :ci do
  header "BUILDING google-cloud-error_reporting"
  header "google-cloud-error_reporting rubocop", "*"
  sh "bundle exec rake rubocop"
  header "google-cloud-error_reporting jsondoc", "*"
  sh "bundle exec rake jsondoc"
  header "google-cloud-error_reporting doctest", "*"
  sh "bundle exec rake doctest"
  header "google-cloud-error_reporting test", "*"
  sh "bundle exec rake test"
end
namespace :ci do
  desc "Run the CI build, with acceptance tests."
  task :acceptance do
    Rake::Task["ci"].invoke
    header "google-cloud-error_reporting acceptance", "*"
    sh "bundle exec rake acceptance -v"
  end
  task :a do
    # This is a handy shortcut to save typing
    Rake::Task["ci:acceptance"].invoke
  end
end

task :default => :test

def header str, token = "#"
  line_length = str.length + 8
  puts ""
  puts token * line_length
  puts "#{token * 3} #{str} #{token * 3}"
  puts token * line_length
  puts ""
end
