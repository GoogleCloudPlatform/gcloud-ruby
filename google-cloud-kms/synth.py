# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This script is used to synthesize generated parts of this library."""

import synthtool as s
import synthtool.gcp as gcp
import synthtool.languages.ruby as ruby
import logging
import re
from subprocess import call
from textwrap import dedent


logging.basicConfig(level=logging.DEBUG)

gapic = gcp.GAPICGenerator()

v1_library = gapic.ruby_library(
    'kms', 'v1', artman_output_name='google-cloud-ruby/google-cloud-kms',
    config_path='artman_cloudkms.yaml'
)
s.copy(v1_library / 'lib')
s.copy(v1_library / 'test')
s.copy(v1_library / 'README.md')
s.copy(v1_library / 'LICENSE')
s.copy(v1_library / '.gitignore')
s.copy(v1_library / '.yardopts')
s.copy(v1_library / 'google-cloud-kms.gemspec', merge=ruby.merge_gemspec)

# Copy common templates
templates = gcp.CommonTemplates().ruby_library()
s.copy(templates)

# PERMANENT: API name for cloudkms
s.replace(
    [
      'README.md',
      'lib/google/cloud/kms.rb',
      'lib/google/cloud/kms/v1.rb'
    ],
    '/kms\\.googleapis\\.com', '/cloudkms.googleapis.com')

# PERMANENT: Add sample to readme
s.replace(
    'README.md',
    '### Next Steps\n',
    dedent("""\
      ### Example

      ```ruby
      require "google/cloud/kms"

      # Create a client for a project and given credentials
      kms = Google::Cloud::Kms.new credentials: "/path/to/keyfile.json"

      # Where to create key rings
      key_ring_parent = kms.class.location_path "my-project", "us-central1"

      # Create a new key ring
      key_ring = kms.create_key_ring key_ring_parent, "my-ring", {}
      puts "Created at #{Time.new key_ring.create_time.seconds}"

      # Iterate over created key rings
      kms.list_key_rings(key_ring_parent).each do |key_ring|
        puts "Found ring called #{key_ring.name}"
      end
      ```

      ### Next Steps\n"""))

# https://github.com/googleapis/gapic-generator/issues/2242
def escape_braces(match):
    expr = re.compile('^([^`]*(`[^`]*`[^`]*)*)([^`#\\$\\\\])\\{([\\w,]+)\\}')
    content = match.group(0)
    while True:
        content, count = expr.subn('\\1\\3\\\\\\\\{\\4}', content)
        if count == 0:
            return content
s.replace(
    'lib/google/cloud/**/*.rb',
    '\n(\\s+)#[^\n]*[^\n#\\$\\\\]\\{[\\w,]+\\}',
    escape_braces)

# https://github.com/googleapis/gapic-generator/issues/2243
s.replace(
    'lib/google/cloud/kms/*/*_client.rb',
    '(\n\\s+class \\w+Client\n)(\\s+)(attr_reader :\\w+_stub)',
    '\\1\\2# @private\n\\2\\3')

# https://github.com/googleapis/gapic-generator/issues/2279
s.replace(
    'lib/**/*.rb',
    '\\A(((#[^\n]*)?\n)*# (Copyright \\d+|Generated by the protocol buffer compiler)[^\n]+\n(#[^\n]*\n)*\n)([^\n])',
    '\\1\n\\6')

# https://github.com/googleapis/gapic-generator/issues/2323
s.replace(
    [
        'lib/**/*.rb',
        'README.md'
    ],
    'https://github\\.com/GoogleCloudPlatform/google-cloud-ruby',
    'https://github.com/googleapis/google-cloud-ruby'
)
s.replace(
    [
        'lib/**/*.rb',
        'README.md'
    ],
    'https://googlecloudplatform\\.github\\.io/google-cloud-ruby',
    'https://googleapis.github.io/google-cloud-ruby'
)

# https://github.com/googleapis/gapic-generator/issues/2393
s.replace(
    'google-cloud-kms.gemspec',
    'gem.add_development_dependency "rubocop".*$',
    'gem.add_development_dependency "rubocop", "~> 0.64.0"'
)

# Require the helpers file
s.replace(
    f'lib/google/cloud/kms/v1.rb',
    f'require "google/cloud/kms/v1/key_management_service_client"',
    '\n'.join([
        f'require "google/cloud/kms/v1/key_management_service_client"',
        f'require "google/cloud/kms/v1/helpers"',
    ])
)

s.replace(
    'google-cloud-kms.gemspec',
    '"README.md", "LICENSE"',
    '"README.md", "AUTHENTICATION.md", "LICENSE"'
)
s.replace(
    '.yardopts',
    'README.md\n',
    'README.md\nAUTHENTICATION.md\nLICENSE\n'
)

# https://github.com/googleapis/google-cloud-ruby/issues/3058
s.replace(
    'google-cloud-kms.gemspec',
    '\nGem::Specification.new do',
    'require File.expand_path("../lib/google/cloud/kms/version", __FILE__)\n\nGem::Specification.new do'
)
s.replace(
    'google-cloud-kms.gemspec',
    '(gem.version\s+=\s+).\d+.\d+.\d.*$',
    '\\1Google::Cloud::Kms::VERSION'
)
s.replace(
    'lib/google/cloud/kms/v1/*_client.rb',
    '(require \".*credentials\"\n)\n',
    '\\1require "google/cloud/kms/version"\n\n'
)
s.replace(
    'lib/google/cloud/kms/v1/*_client.rb',
    'Gem.loaded_specs\[.*\]\.version\.version',
    'Google::Cloud::Kms::VERSION'
)

# Generate the helper methods
call('bundle update && bundle exec rake generate_partials', shell=True)

# Exception tests have to check for both custom errors and retry wrapper errors
for version in ['v1']:
    s.replace(
        f'test/google/cloud/kms/{version}/*_client_test.rb',
        'err = assert_raises Google::Gax::GaxError do',
        f'err = assert_raises Google::Gax::GaxError, CustomTestError_{version} do'
    )
